
#ifndef RENDERBASE_H
#define RENDERBASE_H
#include "VulkanInit.h"
// TODO(Matt): Move most of these vars into an ini file or something.
// TODO(Matt): Whip up a heap alloc'd array, or grab stb stretchybuffer.
// There's a lot of easy to leak heap memory in here.

// Reads a shader file as a heap allocated byte array.
// TODO(Matt): Merge me with the shader module creation, to simplify the usage code.
char *ReadShaderFile(const char *path, u32 *length);

// Initializes the renderer, creating vulkan instance, device, etc.
void InitializeRenderer();
// Shuts down the renderer, freeing associated memory. Do not call while
// work is active on the GPU.
void ShutdownRenderer();

// Draws the next frame.
void DrawFrame();

// Creates the vertex buffer for a given model, from its vertex array.
//void CreateVertexBuffer(Model *model);
// Creates the index buffer for a given model, from its index array.
//void CreateIndexBuffer(Model *model);

void CreateModelBuffer(VkDeviceSize buffer_size, void* buffer_data, VkBuffer* buffer, VkDeviceMemory* buffer_memory, VkBufferUsageFlagBits flags);

// Callback for window resize. Recreates the swapchain.
void OnWindowResized();
// Updates the uniform buffers for a model to reflect its current state.
void UpdateUniforms(u32 image_index);

// Performs a raycast in world space from the mouse location, selecting the
// first object intersected. If accumulate is true, objects are added to a
// list of currently selected. If accumulate is true AND the first object
// hit is already selected, that object is de-selected. Only models with the
// "hit test visible" flag set are tested against.
void SelectObject(s32 mouse_x, s32 mouse_y, bool accumulate);

// Records draw calls for the current frame.
void RecordRenderCommands(u32 image_index);
// Updates the models in the scene with a new time.
void UpdatePrePhysics(double delta);
// Performs a physics update step.
void UpdatePhysics(double delta);
void UpdatePostPhysics(double delta);
void UpdatePostRender(double delta);

// Creates a graphics pipeline from create info generated by a call
// to CreateDefaultPipelineInfo().
void AddMaterial(MaterialCreateInfo *material_info, u32 material_type, VkRenderPass render_pass, u32 sub_pass);

// Creates the materials used by the scene.
void CreateMaterials();
// Destroys materials used by the scene. Performed on swapchain recreation.
void DestroyMaterials();
// Initializes models and other resources in the scene.
void InitializeScene();
// Adds a given model to the scene, using its material type and shader ID.
void AddToScene(Model_Separate_Data model);
// Destroys objects and materials in the scene.
void DestroyScene();

void InitializeSceneResources();
void DestroySceneResources();

void CreateGlobalUniformBuffers();
PerDrawUniformObject *GetPerDrawUniform(u32 object_index);
PerFrameUniformObject *GetPerFrameUniform();
PerPassUniformObject *GetPerPassUniform();

#endif